import streamlit as st
import pydeck as pdk
from geopy.geocoders import Nominatim
import geopandas as gpd
import pandas as pd
import numpy as np

possible_cities = ["", "–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥"]

st.set_page_config(
    page_title="Customer Feedback Platform",
    page_icon="üë•",
    layout="wide"
)

st.title("Customer Feedback Platform by Vibe++")

with st.expander("‚ÑπÔ∏è - –û –ø—Ä–æ–µ–∫—Ç–µ", expanded=True):
    st.write(
        """     
–¢—É—Ç –±—É–¥–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
	    """
    )

    st.markdown("")

st.markdown("")
st.markdown("## üìå –ù–∏–∂–µ —Ä–∞–±–æ—á–∞—è –æ–±–ª–∞—Å—Ç—å")

c1, c2 = st.columns([2, 5])
with c1:
    with st.form(key="scale_form"):
        scale = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—à—Ç–∞–±",
            ["–ú–∞–≥–∞–∑–∏–Ω", "–†–∞–π–æ–Ω", "–ì–æ—Ä–æ–¥", "–†–µ–≥–∏–æ–Ω"],
            help="–¢—É—Ç –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –≤ —Ä–∞–º–∫–∞—Ö –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤.",
        )
        scale_submit_button1 = st.form_submit_button(label="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä")

    with st.form(key="name_form"):
        if scale == "–ú–∞–≥–∞–∑–∏–Ω":
            name = st.text_input(
                "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –º–∞–≥–∞–∑–∏–Ω–∞:",
                help="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –º–∞–≥–∞–∑–∏–Ω–∞ –≤—Ä—É—á–Ω—É—é.")
        elif scale == "–†–∞–π–æ–Ω":
            name = st.text_input(
                "–í–≤–µ–¥–∏—Ç–µ —Ä–∞–π–æ–Ω:",
                help="–í–≤–µ–¥–∏—Ç–µ —Ä–∞–π–æ–Ω –≤—Ä—É—á–Ω—É—é.")
        elif scale == "–ì–æ—Ä–æ–¥":
            city_name = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥: ', possible_cities)
        else:
            manual_address = st.text_input(
                "–í–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:",
                help="–í–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –≤—Ä—É—á–Ω—É—é.")
        scale_submit_button2 = st.form_submit_button(label="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä")

    with c2:
        st.title('–¢—É—Ç –±—É–¥—É—Ç —Ä–µ—É–ª—å—Ç–∞—Ç—ã')

        # —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤
        addresses = ['–í–∞—à –∞–¥—Ä–µ—Å 1', '–í–∞—à –∞–¥—Ä–µ—Å 2', '–í–∞—à –∞–¥—Ä–µ—Å 3']
        ratings = np.array([1.2, 3.1, 4.8])

        geolocator = Nominatim(user_agent="myGeocoder")

        lats = []
        longs = []
        for address in addresses:
            location = geolocator.geocode(address)
            lats.append(location.latitude)
            longs.append(location.longitude)

        # —Å–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–∞–Ω–Ω—ã—Ö —Å –∞–¥—Ä–µ—Å–∞–º–∏ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏
        df = pd.DataFrame({
            '–ê–¥—Ä–µ—Å': addresses,
            '–®–∏—Ä–æ—Ç–∞': lats,
            '–î–æ–ª–≥–æ—Ç–∞': longs,
            '–†–µ–π—Ç–∏–Ω–≥': ratings
        })

        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
        color_scale = np.array(['red', 'orange', 'yellow', 'green', 'blue'])
        df['color'] = pd.cut(df['–†–µ–π—Ç–∏–Ω–≥'], bins=[0., 1., 2., 3., 4., 5.], labels=color_scale)

        st.pydeck_chart(pdk.Deck(
            map_style='mapbox://styles/mapbox/light-v9',
            initial_view_state=pdk.ViewState(
                latitude=np.mean(df['–®–∏—Ä–æ—Ç–∞']),
                longitude=np.mean(df['–î–æ–ª–≥–æ—Ç–∞']),
                zoom=11,
                pitch=50,
            ),
            layers=[
                pdk.Layer(
                    'ScatterplotLayer',
                    data=df,
                    get_position='[–î–æ–ª–≥–æ—Ç–∞, –®–∏—Ä–æ—Ç–∞]',
                    get_color='color',
                    get_radius=200,
                ),
            ],
        ))
